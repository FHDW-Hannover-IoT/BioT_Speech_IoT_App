name: Android CI (API 35)

on:
  push:
    branches: [ '**' ]
    tags-ignore: [ '**' ]   # skip tag pushes (mirrors your GitLab rules)
  pull_request:
  workflow_dispatch:
    inputs:
      build_release:
        description: 'Build release APK'
        type: choice
        options: [ 'false','true' ]
        default: 'false'

concurrency:
  group: android-ci-${{ github.ref }}
  cancel-in-progress: true

# Shared env from your GitLab variables
env:
  GRADLE_USER_HOME: ${{ github.workspace }}/.gradle
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-Xmx2g
  JAVA_TOOL_OPTIONS: -Djava.net.preferIPv4Stack=true

permissions:
  contents: read

jobs:
  format_check:
    name: spotlessCheck
    runs-on: ubuntu-latest
    container: eclipse-temurin:17-jdk
    if: ${{ github.ref_type != 'tag' }}
    steps:
      - uses: actions/checkout@v4

      - name: Prep gradlew
        shell: bash
        run: |
          set -euxo pipefail
          if grep -q $'\r' gradlew; then tr -d '\r' < gradlew > gradlew.new && mv gradlew.new gradlew; fi
          chmod +x gradlew

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            .gradle/wrapper/
            .gradle/caches/
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Gradle version
        run: ./gradlew --version

      - name: Run Spotless
        run: ./gradlew --no-daemon --stacktrace spotlessCheck

  lint_android:
    name: Android Lint (debug)
    runs-on: ubuntu-latest
    container: ghcr.io/cirruslabs/android-sdk:35
    timeout-minutes: 20
    if: ${{ github.ref_type != 'tag' }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            .gradle/wrapper/
            .gradle/caches/
          key: android35-gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: android35-gradle-${{ runner.os }}-

      - name: Before Gradle (SDK wiring)
        shell: bash
        run: |
          set -euxo pipefail

          # gradlew fixups
          if grep -q $'\r' gradlew; then tr -d '\r' < gradlew > gradlew.new && mv gradlew.new gradlew; fi
          chmod +x gradlew

          # Locate SDK in Cirrus image
          SDK_DIR=""
          for d in /opt/android-sdk /opt/android-sdk-linux /opt/android-sdk/current; do
            [ -d "$d" ] && SDK_DIR="$d" && break
          done
          [ -n "$SDK_DIR" ] || (echo "Android SDK not found under /opt"; ls -la /opt || true; exit 1)
          echo "Using SDK: $SDK_DIR"
          echo "sdk.dir=$SDK_DIR" > local.properties
          echo "ANDROID_SDK_ROOT=$SDK_DIR" >> $GITHUB_ENV
          echo "ANDROID_HOME=$SDK_DIR" >> $GITHUB_ENV
          echo "$SDK_DIR/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$SDK_DIR/platform-tools" >> $GITHUB_PATH

          # Ensure API 35 pieces (idempotent)
          yes | sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0" || true

          ./gradlew --version

      - name: Run Lint (debug)
        run: ./gradlew --stacktrace --no-daemon lintDebug

      - name: Collect lint reports
        id: collect
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p ci-lint
          shopt -s nullglob
          for f in app/build/reports/lint-results*.{html,xml,sarif,txt}; do
            cp "$f" ci-lint/
          done

      - name: Upload lint artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-reports
          path: ci-lint/*

  build_debug:
    name: Build Debug APK
    runs-on: ubuntu-latest
    container: ghcr.io/cirruslabs/android-sdk:35
    if: ${{ github.ref_type != 'tag' }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            .gradle/wrapper/
            .gradle/caches/
          key: android35-gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: android35-gradle-${{ runner.os }}-

      - name: Before Gradle
        shell: bash
        run: |
          set -euxo pipefail
          if grep -q $'\r' gradlew; then tr -d '\r' < gradlew > gradlew.new && mv gradlew.new gradlew; fi
          chmod +x gradlew
          SDK_DIR=""
          for d in /opt/android-sdk /opt/android-sdk-linux /opt/android-sdk/current; do
            [ -d "$d" ] && SDK_DIR="$d" && break
          done
          [ -n "$SDK_DIR" ] || (echo "Android SDK not found"; exit 1)
          echo "sdk.dir=$SDK_DIR" > local.properties
          echo "ANDROID_SDK_ROOT=$SDK_DIR" >> $GITHUB_ENV
          echo "ANDROID_HOME=$SDK_DIR" >> $GITHUB_ENV
          echo "$SDK_DIR/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$SDK_DIR/platform-tools" >> $GITHUB_PATH
          yes | sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0" || true
          ./gradlew --version

      - name: Clean & assembleDebug
        run: ./gradlew --stacktrace --no-daemon clean assembleDebug

      - name: Upload debug APK + mapping
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk-and-mapping
          path: |
            app/build/outputs/apk/debug/*.apk
            app/build/outputs/mapping/debug/

  test_unit:
    name: Unit Tests (debug)
    runs-on: ubuntu-latest
    container: ghcr.io/cirruslabs/android-sdk:35
    if: ${{ github.ref_type != 'tag' }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            .gradle/wrapper/
            .gradle/caches/
          key: android35-gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: android35-gradle-${{ runner.os }}-

      - name: Before Gradle
        shell: bash
        run: |
          set -euxo pipefail
          if grep -q $'\r' gradlew; then tr -d '\r' < gradlew > gradlew.new && mv gradlew.new gradlew; fi
          chmod +x gradlew
          SDK_DIR=""
          for d in /opt/android-sdk /opt/android-sdk-linux /opt/android-sdk/current; do
            [ -d "$d" ] && SDK_DIR="$d" && break
          done
          [ -n "$SDK_DIR" ] || (echo "Android SDK not found"; exit 1)
          echo "sdk.dir=$SDK_DIR" > local.properties
          echo "ANDROID_SDK_ROOT=$SDK_DIR" >> $GITHUB_ENV
          echo "ANDROID_HOME=$SDK_DIR" >> $GITHUB_ENV
          echo "$SDK_DIR/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$SDK_DIR/platform-tools" >> $GITHUB_PATH
          yes | sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0" || true
          ./gradlew --version

      - name: Run unit tests
        run: ./gradlew --stacktrace --no-daemon testDebugUnitTest

      - name: Upload JUnit XML + HTML reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-reports
          path: |
            app/build/test-results/testDebugUnitTest/*.xml
            app/build/reports/tests/testDebugUnitTest/

  package_release:
    name: Package Release APK
    runs-on: ubuntu-latest
    container: ghcr.io/cirruslabs/android-sdk:35
    # Run when:
    # - manual dispatch input build_release == 'true' OR
    # - repo/org Actions Variable BUILD_RELEASE == 'true'
    if: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.build_release == 'true') || vars.BUILD_RELEASE == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            .gradle/wrapper/
            .gradle/caches/
          key: android35-gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: android35-gradle-${{ runner.os }}-

      - name: Before Gradle
        shell: bash
        run: |
          set -euxo pipefail
          if grep -q $'\r' gradlew; then tr -d '\r' < gradlew > gradlew.new && mv gradlew.new gradlew; fi
          chmod +x gradlew
          SDK_DIR=""
          for d in /opt/android-sdk /opt/android-sdk-linux /opt/android-sdk/current; do
            [ -d "$d" ] && SDK_DIR="$d" && break
          done
          [ -n "$SDK_DIR" ] || (echo "Android SDK not found"; exit 1)
          echo "sdk.dir=$SDK_DIR" > local.properties
          echo "ANDROID_SDK_ROOT=$SDK_DIR" >> $GITHUB_ENV
          echo "ANDROID_HOME=$SDK_DIR" >> $GITHUB_ENV
          echo "$SDK_DIR/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$SDK_DIR/platform-tools" >> $GITHUB_PATH
          yes | sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0" || true
          ./gradlew --version

      - name: Assemble Release
        run: ./gradlew --stacktrace --no-daemon assembleRelease

      - name: Upload release APK + mapping
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-apk-and-mapping
          path: |
            app/build/outputs/apk/release/*.apk
            app/build/outputs/mapping/release/