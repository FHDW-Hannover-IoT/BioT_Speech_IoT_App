name: Android CI (API 35)

on:
  push:
    branches: [ '**' ]     # run CI on any branch
    tags: [ 'v*' ]         # also trigger a run when pushing tags like v1.2.3
  pull_request:
  workflow_dispatch: { }  # optional manual runs (doesn't trigger release unless push to main/tag)

concurrency:
  group: android-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  GRADLE_USER_HOME: ${{ github.workspace }}/.gradle
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-Xmx2g
  JAVA_TOOL_OPTIONS: -Djava.net.preferIPv4Stack=true

permissions:
  contents: read

jobs:
  format_check:
    name: spotlessCheck
    runs-on: ubuntu-latest
    container: eclipse-temurin:17-jdk
    # skip this job on tag pushes
    if: ${{ github.ref_type != 'tag' }}
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/actions/setup-gradle@v4

      - name: Prep gradlew
        shell: bash
        run: |
          set -euxo pipefail
          if grep -q $'\r' gradlew; then tr -d '\r' < gradlew > gradlew.new && mv gradlew.new gradlew; fi
          chmod +x gradlew

      - name: Gradle version
        run: ./gradlew --version

      - name: Run Spotless
        run: ./gradlew --no-daemon --stacktrace spotlessCheck

  lint_android:
    name: Android Lint (debug)
    runs-on: ubuntu-latest
    container: ghcr.io/cirruslabs/android-sdk:35
    timeout-minutes: 20
    if: ${{ github.ref_type != 'tag' }}
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/actions/setup-gradle@v4

      - name: Before Gradle (SDK wiring)
        shell: bash
        run: |
          set -euxo pipefail

          # gradlew fixups
          if grep -q $'\r' gradlew; then tr -d '\r' < gradlew > gradlew.new && mv gradlew.new gradlew; fi
          chmod +x gradlew

          # Locate SDK in Cirrus image
          SDK_DIR=""
          for d in /opt/android-sdk /opt/android-sdk-linux /opt/android-sdk/current; do
            [ -d "$d" ] && SDK_DIR="$d" && break
          done
          [ -n "$SDK_DIR" ] || (echo "Android SDK not found under /opt"; ls -la /opt || true; exit 1)
          echo "Using SDK: $SDK_DIR"
          echo "sdk.dir=$SDK_DIR" > local.properties
          echo "ANDROID_SDK_ROOT=$SDK_DIR" >> $GITHUB_ENV
          echo "ANDROID_HOME=$SDK_DIR" >> $GITHUB_ENV
          echo "$SDK_DIR/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$SDK_DIR/platform-tools" >> $GITHUB_PATH

          # Ensure API 35 pieces (idempotent)
          yes | sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0" || true

          ./gradlew --version

      - name: Run Lint (debug)
        run: ./gradlew --stacktrace --no-daemon lintDebug

      - name: Collect lint reports
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p ci-lint
          shopt -s nullglob
          for f in app/build/reports/lint-results*.{html,xml,sarif,txt}; do
            cp "$f" ci-lint/
          done

      - name: Upload lint artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-reports
          path: ci-lint/*

  build_debug:
    name: Build Debug APK
    runs-on: ubuntu-latest
    container: ghcr.io/cirruslabs/android-sdk:35
    if: ${{ github.ref_type != 'tag' }}
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/actions/setup-gradle@v4

      - name: Before Gradle
        shell: bash
        run: |
          set -euxo pipefail
          if grep -q $'\r' gradlew; then tr -d '\r' < gradlew > gradlew.new && mv gradlew.new gradlew; fi
          chmod +x gradlew
          SDK_DIR=""
          for d in /opt/android-sdk /opt/android-sdk-linux /opt/android-sdk/current; do
            [ -d "$d" ] && SDK_DIR="$d" && break
          done
          [ -n "$SDK_DIR" ] || (echo "Android SDK not found"; exit 1)
          echo "sdk.dir=$SDK_DIR" > local.properties
          echo "ANDROID_SDK_ROOT=$SDK_DIR" >> $GITHUB_ENV
          echo "ANDROID_HOME=$SDK_DIR" >> $GITHUB_ENV
          echo "$SDK_DIR/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$SDK_DIR/platform-tools" >> $GITHUB_PATH
          yes | sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0" || true
          ./gradlew --version

      - name: Clean & assembleDebug
        run: ./gradlew --stacktrace --no-daemon clean assembleDebug

      - name: Upload debug APK + mapping
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk-and-mapping
          path: |
            app/build/outputs/apk/debug/*.apk
            app/build/outputs/mapping/debug/

  test_unit:
    name: Unit Tests (debug)
    runs-on: ubuntu-latest
    container: ghcr.io/cirruslabs/android-sdk:35
    if: ${{ github.ref_type != 'tag' }}
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/actions/setup-gradle@v4

      - name: Before Gradle
        shell: bash
        run: |
          set -euxo pipefail
          if grep -q $'\r' gradlew; then tr -d '\r' < gradlew > gradlew.new && mv gradlew.new gradlew; fi
          chmod +x gradlew
          SDK_DIR=""
          for d in /opt/android-sdk /opt/android-sdk-linux /opt/android-sdk/current; do
            [ -d "$d" ] && SDK_DIR="$d" && break
          done
          [ -n "$SDK_DIR" ] || (echo "Android SDK not found"; exit 1)
          echo "sdk.dir=$SDK_DIR" > local.properties
          echo "ANDROID_SDK_ROOT=$SDK_DIR" >> $GITHUB_ENV
          echo "ANDROID_HOME=$SDK_DIR" >> $GITHUB_ENV
          echo "$SDK_DIR/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$SDK_DIR/platform-tools" >> $GITHUB_PATH
          yes | sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0" || true
          ./gradlew --version

      - name: Run unit tests
        run: ./gradlew --stacktrace --no-daemon testDebugUnitTest

      - name: Upload JUnit XML + HTML reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-reports
          path: |
            app/build/test-results/testDebugUnitTest/*.xml
            app/build/reports/tests/testDebugUnitTest/

  android_instrumented_tests:
    name: Instrumented Tests (API ${{ matrix.api }})
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: ${{ github.ref_type != 'tag' }}
    strategy:
      fail-fast: true
      matrix:
        api: [ 34, 35 ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - uses: gradle/actions/setup-gradle@v4
        with:
          cache-overwrite-existing: true
          gradle-home-cache-cleanup: true

      - name: Prepare Gradle wrapper
        shell: bash
        run: |
          set -euxo pipefail
          if grep -q $'\r' gradlew; then tr -d '\r' < gradlew > gradlew.new && mv gradlew.new gradlew; fi
          chmod +x gradlew
          ./gradlew --version

      # Enable KVM (hardware acceleration) on Ubuntu runner
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          sudo modprobe kvm || true
          sudo modprobe kvm_intel || sudo modprobe kvm_amd || true
          ls -l /dev/kvm || true

      - name: Run connectedDebugAndroidTest
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api }}
          arch: x86_64
          target: google_apis
          profile: pixel_6
          emulator-options: -no-window -no-boot-anim -gpu swiftshader_indirect -camera-back none -camera-front none
          emulator-boot-timeout: 600
          disable-animations: true
          # change task if your module isn't :app
          script: ./gradlew --stacktrace connectedDebugAndroidTest

      - name: Upload instrumented test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: instrumented-test-reports-api-${{ matrix.api }}
          path: |
            **/build/reports/androidTests/connected/**
            **/build/outputs/androidTest-results/connected/**

  package_release:
    name: Package Release APK
    runs-on: ubuntu-latest
    container: ghcr.io/cirruslabs/android-sdk:35
    # Run for pushes to main OR for tag pushes v*
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) }}
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/actions/setup-gradle@v4

      - name: Before Gradle
        shell: bash
        run: |
          set -euxo pipefail
          if grep -q $'\r' gradlew; then tr -d '\r' < gradlew > gradlew.new && mv gradlew.new gradlew; fi
          chmod +x gradlew
          SDK_DIR=""
          for d in /opt/android-sdk /opt/android-sdk-linux /opt/android-sdk/current; do
            [ -d "$d" ] && SDK_DIR="$d" && break
          done
          [ -n "$SDK_DIR" ] || (echo "Android SDK not found"; exit 1)
          echo "sdk.dir=$SDK_DIR" > local.properties
          echo "ANDROID_SDK_ROOT=$SDK_DIR" >> $GITHUB_ENV
          echo "ANDROID_HOME=$SDK_DIR" >> $GITHUB_ENV
          echo "$SDK_DIR/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$SDK_DIR/platform-tools" >> $GITHUB_PATH
          yes | sdkmanager "platform-tools" "platforms;android-35" "build-tools;35.0.0" || true
          ./gradlew --version

      - name: Assemble Release
        run: ./gradlew --stacktrace --no-daemon assembleRelease

      - name: Upload release APK + mapping
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-apk-and-mapping
          path: |
            app/build/outputs/apk/release/*.apk
            app/build/outputs/mapping/release/